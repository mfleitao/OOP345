/**********************************************************
// Workshop 1: Across Translation Units
// 2019/01/20
// Matheus Fernando Leitao
// ID: 148 300 171
// Description: Reflection
**********************************************************/

1. The difference between internal and external linkage using examples from your code

An external linkage is a global variable which for its declaration is needed the keyword 'extern', 
however none value is attributed to it. This global variable is initialized in a different .cpp file
where a value is attributed. An extern linkage is global which means that it's out of a scope and it
can be accessed by in any place. Whereas an internal linkage is a variable which is invisible for 
other .cpp files, but it can accessed by other scope inside the same .cpp file. This one uses the 
keyword "static" to be declared and it can be initialized at the same time (at the same line), 
i.e static int number - 5;


2. The execution effect of the code in the process() function that creates the String 
object which is inserted into standard output (which member function(s) does this code call)

After creates the String object it calls a helper function through the operator "<<" then the this
one calls de function display(), which insert the member "str" into the "ostream" object. 


3. The changes that you made in upgrading your String class.

I changed the String header where I :
	- delete the const MAX;
	- changed the "char str[MAX + 1]" to a pointer (char* str);
	- created an integer member to store the size of the string to be created;
	- declared a destructor to delete the string after being used.

Also changed the String CPP File:
	- used the "strlen" function from "cstring" library to determine the size of string entered;
	- initialized the member "str" using the size stored previously;
	- used the "strncpy" function to copy the string entered into the member "str";
	- finally implemented the destructor to delete the "str" then set a "nullptr" to it.


*** QUIZ 1 ***

1.
	answer 'L'

2.
	unsigned x {6u};

5. 
	"for each"
	int a = {1,2,3,4,5};
	for (int i : a)
		std::cout << i;
		
6. 
	class Car {
		public:
			Car& operator=(Car&&);
			Car(Car&&);
	}

7. 
	class ICT {
		public:
			static unsigned campus;
	}
		ICT::campus = 3u;
